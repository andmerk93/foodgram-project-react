name: CI/CD foodgram

on: [push]

jobs:
  flake8:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
  
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version:  ${{ matrix.python-version }}

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r backend/requirements.txt 

    - name: Test with flake8
      run: |
        echo '[flake8]' > setup.cfg
        echo 'ignore =' >> setup.cfg
        echo '    W503' >> setup.cfg
        echo '    I001' >> setup.cfg
        echo '    I004' >> setup.cfg
        echo '    I005' >> setup.cfg
        echo '    R504' >> setup.cfg
        echo 'exclude =' >> setup.cfg
        echo '    tests/,' >> setup.cfg
        echo '    */migrations/,' >> setup.cfg
        echo '    venv/,' >> setup.cfg
        echo '    env/' >> setup.cfg
        echo 'per-file-ignores =' >> setup.cfg
        echo '    */settings.py:E501' >> setup.cfg
        echo 'max-complexity = 10' >> setup.cfg
        python -m flake8

  build_and_push:
    runs-on: ubuntu-latest
    needs: flake8
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - name: Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v2.5.0
      - name: Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v4.0.0
        with:
          context: backend/
          push: true
          tags: andmerk93/foodgram:latest

  deploy:
    runs-on: ubuntu-latest
    needs: flake8
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
            cd foodgram-project-react/
            git pull
            cd infra/ 
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} > .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo DB_USER=${{ secrets.DB_USER }} >> .env
            echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            docker compose pull
            docker compose up --build --force-recreate -d
            docker container prune -f
            docker image prune -f
            docker compose exec backend python manage.py migrate
            docker compose exec backend python manage.py collectstatic --no-input

  send_message_push:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} - pushed to dockerhub

  send_message_deploy:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} - deployed to VM